<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>T-SPACE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tigutf.github.io/"/>
  <updated>2019-06-27T17:16:12.000Z</updated>
  <id>http://tigutf.github.io/</id>
  
  <author>
    <name>Tigutf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于微服务设计的面试题</title>
    <link href="http://tigutf.github.io/2019/06/28/%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://tigutf.github.io/2019/06/28/关于微服务设计的面试题/</id>
    <published>2019-06-27T17:16:12.000Z</published>
    <updated>2019-06-27T17:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天面试，面试官提到一个问题：项目中是否遇到过，多个接口服务中，我有的数据库操作已经提交了，但有个别接口出现异常，这时候针对我已提交的内容该怎处理？</p><p>头脑一热，这是一个分布式事务的问题，抓着数据库事务不放，回答得不尽人意；跳出数据库事务的局限，其实这就是集群服务中一致性的问题–I should have been able to answer better 😔<br><a id="more"></a></p><p>一心想着数据库事务，数据的提交和回滚，已提交更新的数据如何回滚回来，一时间想到的便是从备份的数据库中恢复回来（后面想想，恢复回滚的想法或许没错，但是从备份库恢复，一是无法确定从库是否已同步完成，二则是要恢复的切入点难以确定）。</p><p>面试官提示二段提交（看过，有点印象，却在当时忘记了该如何解释，郁闷~）</p><blockquote><p>　2PC，又叫做 XA Transactions；<br>XA 是一个两阶段提交协议，该协议分为以下两个阶段：<br>第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.<br>第二阶段：事务协调器要求每个数据库提交数据。</p></blockquote><p>按照此二阶段提交原理，若有一个中间的协调器广播监控各个服务接口事务的提交状态。判断所有节点是否已可以提交，从而使得所有事务在真正提交前保持一致。</p><p>数据存储功能，目前多种组件可以实现（缓存redis，消息中间件，zk的微服务中常用工具）。通过这些工具，让数据得以存储备份，而其中指针偏移offset的存在，也可以帮助我们定位数据事务走到了哪一步中。</p><p>CAP（一致性、可用性、分区容错性）<br>集群当中，分区容错性必然存在，那则是一致性和可用性的权衡取舍</p><p>BASE（Basically Available（基本可用）<br>Soft state（软状态）<br>Eventually consistent（最终一致性））</p><p>基于以上两种设计思想的对比，对于频繁被使用，并发高的服务，我们一般会选择AP组合，提高高可用，数据一致性我们则保证它最终的一个一致性。</p><p>（待续）</p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天面试，面试官提到一个问题：项目中是否遇到过，多个接口服务中，我有的数据库操作已经提交了，但有个别接口出现异常，这时候针对我已提交的内容该怎处理？&lt;/p&gt;
&lt;p&gt;头脑一热，这是一个分布式事务的问题，抓着数据库事务不放，回答得不尽人意；跳出数据库事务的局限，其实这就是集群服务中一致性的问题–I should have been able to answer better 😔&lt;br&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://tigutf.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="CAP|" scheme="http://tigutf.github.io/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>一道多线程练习题</title>
    <link href="http://tigutf.github.io/2019/05/17/%E4%B8%80%E9%81%93%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://tigutf.github.io/2019/05/17/一道多线程练习题/</id>
    <published>2019-05-16T16:59:07.000Z</published>
    <updated>2019-05-16T16:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一个超长的数组，现要对数组中数字进行求和，若使用多线程~<br><a id="more"></a></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个超长的数组20亿（长度2的32次方最大了），随机插入数字</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr = <span class="keyword">new</span> ArrayList(<span class="number">200000000</span>);</span><br><span class="line">    Random random = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i=<span class="number">0</span>; i &lt; <span class="number">200000000</span>; i++)&#123;</span><br><span class="line">        arr.add(random.nextInt(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一般解法"><a href="#一般解法" class="headerlink" title="一般解法"></a>一般解法</h3><blockquote><p>主线程里面直接累加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">200000000</span>; i++)&#123;</span><br><span class="line">        result += arr.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"result == "</span> + result);</span><br><span class="line">    System.out.println(<span class="string">"consume time : "</span> + (System.currentTimeMillis()-startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果<br><br> result == 899943289<br><br> consume time : 187 ms</p></blockquote><h3 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h3><ul><li>思路：定义一个当前数组的下标，每有一个线程获取到数组的一个当前下标的值，下标就+1；多个线程，循环同步访问数组的值，在线程内部做累加；利用CountDownLatch，使得所有线程执行完后，在对各个线程的算出的值做累加。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mutilThreadTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;indexs.length;j++)&#123;</span><br><span class="line">        <span class="keyword">new</span> TestThread(countDownLatch,j).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">"error == "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; indexs.length; i++)&#123;</span><br><span class="line">        result += indexs[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"result == "</span> + result);</span><br><span class="line">    System.out.println(<span class="string">"consume time : "</span> + (System.currentTimeMillis()-startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果<br><br> result == 899943289<br><br> consume time : 10852 ms</p></blockquote><p>从执行结果看出，没用多线程执行的代码，消耗时间更短；</p><p>多线程的使用为的是提高程序的执行效率，但是针对此题这样的多线程操作思路却并没有带来更高的效率，反而更慢了。多线程竞争数组、线程的同步等待，都使得性能更低了；换个思路，若将长数组进行预先分段，每个线程执行一个分段的累加，线程不在竞争而是直接执行，效率会更好（这部分思路的代码暂时不写咯~）</p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个超长的数组，现要对数组中数字进行求和，若使用多线程~&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://tigutf.github.io/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://tigutf.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>记一次内存泄漏问题</title>
    <link href="http://tigutf.github.io/2019/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://tigutf.github.io/2019/04/17/记一次内存泄漏问题/</id>
    <published>2019-04-16T16:57:11.000Z</published>
    <updated>2019-04-16T16:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Esl 一个FreeSwitch外呼系统连接的客户端，由于没有人维护更新而导致的血案。<br><a id="more"></a></p><p>最近新接手了一个老系统——智能外呼系统，分了两个应用，一个对接的是老的外呼系统IVR（华为的一套），一个则是通过freeswitch外呼；由于IVR老的一套所用语言较老，部门内没有人懂，所以想往FS迁移；之前的同事通过ESL客户端，对接FS服务器，然后通过相关指令作外呼管理，实现了大概功能，然而存在问题，曾在生产上跑着跑着内存泄漏了😓，没解决。。。接手过来，也就轮到我们来解决问题了。。</p><h3 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h3><p>调低JVM相关参数配置：堆内存大小和直接内存大小；手动添加外呼任务执行。等待一段时间后，failed to allocate 64(bytes) of direct memory和 OutOfDirectMemoryError问题便出现了。</p><h3 id="问题寻找定位"><a href="#问题寻找定位" class="headerlink" title="问题寻找定位"></a>问题寻找定位</h3><p>问题排查参考：<a href="https://www.jianshu.com/p/4e96beb37935" target="_blank" rel="noopener">https://www.jianshu.com/p/4e96beb37935</a></p><p>netty内部有对堆外内存进行计数的一个参数：计数器为 DIRECT_MEMORY_COUNTER，单位B;在 netty每次分配堆外内存之前，都会计数.</p><p>跟踪esl代码，观察计数器变化；在esl中有<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Specialised &#123;<span class="doctag">@link</span> SimpleChannelInboundHandler&#125; that implements the logic of an ESL connection that</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * is common to both inbound and outbound clients. This</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * handler expects to receive decoded &#123;<span class="doctag">@link</span> EslMessage&#125; or &#123;<span class="doctag">@link</span> EslEvent&#125; objects.</span></span><br><span class="line"><span class="comment"> ...</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEslClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">EslMessage</span>&gt;</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EslMessage为esl中对传输信息的一个封装，但它并没有实现继承ReferenceCounted，netty 4 之后，对象的生命周期由它们的引用计数（reference counts）管理，而不是由垃圾收集器（garbage collector）管理；所以导致最后分配的内存，对象引用是EslMessage，但是因为没有实现ReferenceCounted，所以最后没有通过netty释放出内存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EslFrameDecoder</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">EslFrameDecoder</span>.<span class="title">State</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Line feed character</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> LF = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line"></span><br><span class="line">READ_HEADER,</span><br><span class="line"></span><br><span class="line">READ_BODY,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxHeaderSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EslMessage currentMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> treatUnknownHeadersAsBody = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EslFrameDecoder</span><span class="params">(<span class="keyword">int</span> maxHeaderSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>(State.READ_HEADER);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxHeaderSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"></span><br><span class="line"><span class="string">"maxHeaderSize must be a positive integer: "</span> +</span><br><span class="line"></span><br><span class="line">maxHeaderSize);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.maxHeaderSize = maxHeaderSize;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EslFrameDecoder</span><span class="params">(<span class="keyword">int</span> maxHeaderSize, <span class="keyword">boolean</span> treatUnknownHeadersAsBody)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>(maxHeaderSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.treatUnknownHeadersAsBody = treatUnknownHeadersAsBody;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf buffer, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">State state = state();</span><br><span class="line"></span><br><span class="line">log.trace(<span class="string">"decode() : state [&#123;&#125;]"</span>, state);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> READ_HEADER:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">currentMessage = <span class="keyword">new</span> EslMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*  read '\n' terminated lines until reach a single '\n'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> reachedDoubleLF = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!reachedDoubleLF) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this will read or fail</span></span><br><span class="line"></span><br><span class="line">String headerLine = readToLineFeedOrFail(buffer, maxHeaderSize);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">"read header line [&#123;&#125;]"</span>, headerLine);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!headerLine.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// split the header line</span></span><br><span class="line"></span><br><span class="line">String[] headerParts = HeaderParser.splitHeader(headerLine);</span><br><span class="line"></span><br><span class="line">Name headerName = Name.fromLiteral(headerParts[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headerName == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (treatUnknownHeadersAsBody) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cache this 'header' as a body line &lt;-- useful for Outbound client mode</span></span><br><span class="line"></span><br><span class="line">currentMessage.addBodyLine(headerLine);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unhandled ESL header ["</span> + headerParts[<span class="number">0</span>] + <span class="string">']'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">currentMessage.addHeader(headerName, headerParts[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">reachedDoubleLF = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do not read in this line again</span></span><br><span class="line"></span><br><span class="line">checkpoint();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// have read all headers - check for content-length</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentMessage.hasContentLength()) &#123;</span><br><span class="line"></span><br><span class="line">checkpoint(State.READ_BODY);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">"have content-length, decoding body .."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  force the next section</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// end of message</span></span><br><span class="line"></span><br><span class="line">checkpoint(State.READ_HEADER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send message upstream</span></span><br><span class="line"></span><br><span class="line">EslMessage decodedMessage = currentMessage;</span><br><span class="line"></span><br><span class="line">currentMessage = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">out.add(decodedMessage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> READ_BODY:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*   read the content-length specified</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> contentLength = currentMessage.getContentLength();</span><br><span class="line"></span><br><span class="line">ByteBuf bodyBytes = buffer.readBytes(contentLength);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">"read [&#123;&#125;] body bytes"</span>, bodyBytes.writerIndex());</span><br><span class="line"></span><br><span class="line"><span class="comment">// most bodies are line based, so split on LF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (bodyBytes.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">String bodyLine = readLine(bodyBytes, contentLength);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">"read body line [&#123;&#125;]"</span>, bodyLine);</span><br><span class="line"></span><br><span class="line">currentMessage.addBodyLine(bodyLine);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end of message</span></span><br><span class="line"></span><br><span class="line">checkpoint(State.READ_HEADER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send message upstream</span></span><br><span class="line"></span><br><span class="line">EslMessage decodedMessage = currentMessage;</span><br><span class="line"></span><br><span class="line">currentMessage = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out.add(decodedMessage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Illegal state: ["</span> + state + <span class="string">']'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readToLineFeedOrFail</span><span class="params">(ByteBuf buffer, <span class="keyword">int</span> maxLineLegth)</span> <span class="keyword">throws</span> TooLongFrameException </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this read might fail</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> nextByte = buffer.readByte();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nextByte == LF) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Abort decoding if the decoded line is too large.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sb.length() &gt;= maxLineLegth) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> TooLongFrameException(</span><br><span class="line"></span><br><span class="line"><span class="string">"ESL header line is longer than "</span> + maxLineLegth + <span class="string">" bytes."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append((<span class="keyword">char</span>) nextByte);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readLine</span><span class="params">(ByteBuf buffer, <span class="keyword">int</span> maxLineLength)</span> <span class="keyword">throws</span> TooLongFrameException </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (buffer.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this read should always succeed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> nextByte = buffer.readByte();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nextByte == LF) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Abort decoding if the decoded line is too large.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sb.length() &gt;= maxLineLength) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> TooLongFrameException(</span><br><span class="line"></span><br><span class="line"><span class="string">"ESL message line is longer than "</span> + maxLineLength + <span class="string">" bytes."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append((<span class="keyword">char</span>) nextByte);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Esl 一个FreeSwitch外呼系统连接的客户端，由于没有人维护更新而导致的血案。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://tigutf.github.io/categories/Java/"/>
    
    
      <category term="内存泄漏" scheme="http://tigutf.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试总结一</title>
    <link href="http://tigutf.github.io/2019/04/02/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://tigutf.github.io/2019/04/02/面试总结一/</id>
    <published>2019-04-01T16:51:26.000Z</published>
    <updated>2019-04-01T16:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;!-- end --&gt;
&lt;font color=&quot;blue&quot; face=&quot;楷体&quot;&gt;&lt;br&gt;好好学习天天向上~&lt;br&gt;分享、交流、共同进步~&lt;br&gt;&lt;/font&gt;



      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://tigutf.github.io/2019/02/28/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://tigutf.github.io/2019/02/28/linux常用命令/</id>
    <published>2019-02-28T14:07:35.000Z</published>
    <updated>2019-02-28T14:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中常用命令汇总</p><a id="more"></a><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li><p>ls  list 列举</p><blockquote><p>-a 列出目录所有文件，包含隐藏文件 <br><br>-l 列出文件并包含文件的权限、所有者、文件大小等详细信息 <br><br>ll 等价于 ls -l</p></blockquote></li><li><p>cd change Directory切换目录</p><blockquote><p>cd /  root目录 <br><br>cd ~  home目录 <br><br>cd .. 返回上一层 <br><br>cd -  进入上一次工作路径 <br></p></blockquote></li><li>pwd 查看当前工作目录路径</li><li>mkdir 创建文件夹<blockquote><p>mkdir -p 路径名 此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不在的目录,即一次可以建立多个目录;</p></blockquote></li><li><p>rm [选项] 文件 删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则rm不会删除目录。如果使用rm来删除文件，通常仍可以将该文件恢复原状</p><blockquote><p>rm -i *.log 删除任何.log文件；删除前逐一询问确认； <br><br>rm -rf test 删除test子目录及其目录中所有文件,并且不用一一确认；</p></blockquote></li><li><p>rmdir 删除目录</p></li><li><p>mv 移动文件或修改文件名，根据第二参数类型决定</p><blockquote><p>mv test.log test1.txt 重命名为test1.txt  <br><br>mv test1.log test2.log /dir 移动两个文件到dir目录</p></blockquote></li><li><p>cp 复制</p><blockquote><p>-i 提示，提示是否覆盖 <br><br>-r 复制目录及目录内所有项目 <br><br>cp -ai test.txt /test/dist 复制test.txt到/test/dist目录下,保持源文件时间</p></blockquote></li><li>cat ：一次显示整个文件；从键盘创建一个文件 cat &gt; filename； 将几个文件合并成一个文件。<blockquote><p>cat -n a.log b.log  把a.log的文件内容加上行号后输入b.log这个文件里</p></blockquote></li><li>more and less 显示内容<blockquote><p>more +3 text.txt 显示文件中从第3行起的内容 <br><br>ls -l | more -5 所列出文件目录详细信息，借助管道使每次显示5行,按空格键显示下5行 <br><br>ps -aux | less -N ps查看进程信息并通过less分页显示,显示行数</p></blockquote></li><li><p>tail 显示指定文件末尾内容，常用查看日志</p><blockquote><p> tail -100 -f -n test.log 从后到前读取100行，且循环读取，显示行数</p></blockquote></li><li><p>whereis 查看文件位置，用于程序名的搜索</p></li><li><p>locate 通过搜寻系统内建文档数据库达到快速找到档案</p><blockquote><p>-r 使用正则运算式做为寻找条件 <br><br>locate /etc/sh 搜索etc目录下所有以sh开头的文件</p></blockquote></li><li><p>find 用于在文件树中查找文件</p></li><li>chmod 修改权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">权限代号：</span><br><span class="line">         r ：读权限，用数字4表示</span><br><span class="line">         w ：写权限，用数字2表示</span><br><span class="line">         x ：执行权限，用数字1表示</span><br><span class="line">         - ：删除权限，用数字0表示</span><br><span class="line">         s ：特殊权限</span><br><span class="line">权限范围：</span><br><span class="line">        u ：目录或者文件的当前的用户</span><br><span class="line">        g ：目录或者文件的当前的群组</span><br><span class="line">        o ：除了目录或者文件的当前用户或群组之外的用户或者群组</span><br><span class="line">        a ：所有的用户及群组</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>-rw-r–r– 10个位置，第一个字符表示文件类型，-表示非目录，d表示目录；从第二个字符开始到第十个共9个字符，3个字符一组，分别表示了3组用户对文件或者目录的权限。权限字符用横线代表空许可，r代表只读，w代表写，x代表可执行。 <br><br>-c 当发生改变时，报告处理信息 <br><br>  -R 处理指定目录以及其子目录下所有文件<br>  chmod a+x t.log 增加文件t.log所有用户可执行权限 <br><br>  chmod 751 t.log -c 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p></blockquote><ol><li><p>chown 将指定文件的拥有者改为指定的用户或组</p><blockquote><p>chown -c mail:mail test.log 改变拥有者和群组,并显示改变信息</p></blockquote></li><li><p>grep 文本搜索命令</p><blockquote><p>grep -aR -100 “abc” test.log 递归循环查找文件中包含关键字的内容，显示匹配字符后的100行</p></blockquote></li><li><p>ps 查看当前运行的进程状态</p><blockquote><p>ps -ef 显示当前所有进程环境变量及进程间关系</p></blockquote></li><li><p>kill 杀死进程</p></li><li>free 显示系统内存使用情况</li><li>curl 链接调用，http命令行工具<blockquote><p>curl -o linux.html <a href="http://www.linux.com" target="_blank" rel="noopener">http://www.linux.com</a> 保存网页 <br><br>curl -O <a href="http://www.baidu.com/page/2/" target="_blank" rel="noopener">http://www.baidu.com/page/2/</a> -O <a href="http://www.baidu.com/page/3/" target="_blank" rel="noopener">http://www.baidu.com/page/3/</a> 保存链接网页的文件 <br><br>curl -H 自定义 header -A 自定义User-Agent用户代理 使用 -d 发送 POST 请求。</p></blockquote></li></ol><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中常用命令汇总&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://tigutf.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://tigutf.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>新年2019篇</title>
    <link href="http://tigutf.github.io/2019/02/05/%E6%96%B0%E5%B9%B42019%E7%AF%87/"/>
    <id>http://tigutf.github.io/2019/02/05/新年2019篇/</id>
    <published>2019-02-05T09:12:41.000Z</published>
    <updated>2019-02-05T09:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>年味似乎越来越淡，但时间的路上却越来越多滋味。<br><a id="more"></a></p><ul><li><p>2019 新的一年，老了一岁；</p></li><li><p>石座前，门栏外，柴火潇潇崔汗；</p></li><li><p>屋檐后，窗帘内，茶水噜噜解醉。</p></li></ul><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年味似乎越来越淡，但时间的路上却越来越多滋味。&lt;br&gt;
    
    </summary>
    
      <category term="散谈" scheme="http://tigutf.github.io/categories/%E6%95%A3%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://tigutf.github.io/2019/01/20/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://tigutf.github.io/2019/01/20/Git常用命令/</id>
    <published>2019-01-20T15:35:19.000Z</published>
    <updated>2019-01-21T15:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git分布式版本控制系统"><a href="#Git分布式版本控制系统" class="headerlink" title="Git分布式版本控制系统"></a>Git分布式版本控制系统</h2><p>其版本管理的思想，类比树枝，有树干，树干可以衍生出多个枝干，每个枝干可以是不同的版本主题，而枝干内容也可以汇流到主树干中。<br><a id="more"></a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>项目工作中常用命令</p><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><ul><li>初始化一个项目为git项目，在执行命令的目录下会生成.git隐藏的配置管理文件夹</li></ul><h3 id="git-config-–global-user-name-“username”"><a href="#git-config-–global-user-name-“username”" class="headerlink" title="git config –global user.name “username”"></a>git config –global user.name “username”</h3><ul><li>设置用户名</li></ul><h3 id="git-config-–global-user-email-“useremail”"><a href="#git-config-–global-user-email-“useremail”" class="headerlink" title="git config –global user.email “useremail”"></a>git config –global user.email “useremail”</h3><ul><li>设置邮箱地址(建议用注册giuhub的邮箱)</li></ul><h3 id="git-clone-url"><a href="#git-clone-url" class="headerlink" title="git clone url"></a>git clone url</h3><ul><li>将已知项目仓库克隆到本地</li></ul><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><ul><li>查看当前项目分支的状态（有没有修改新增的文件内容）</li></ul><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><ul><li>显示分支列表，同时确认当前所在的分支</li></ul><h3 id="git-check"><a href="#git-check" class="headerlink" title="git check"></a>git check</h3><ul><li><p>后面跟分支名，则是切换到指定分支</p></li><li><p>后面跟 -b 分支名xxx ，创建名为xxx的分支，并且切换到xxx分支</p></li><li><p>后面跟 – [file] 还原对filename的文件的修改</p></li></ul><h3 id="git-add-filename"><a href="#git-add-filename" class="headerlink" title="git add [filename]"></a>git add [filename]</h3><ul><li>添加修改或新增的文件到暂存区，为提交做准备</li><li>后面跟 . 表示添加全部文件</li></ul><h3 id="git-commit-m-“备注”"><a href="#git-commit-m-“备注”" class="headerlink" title="git commit -m “备注”"></a>git commit -m “备注”</h3><ul><li>提交暂存区的内容到当前分支</li></ul><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul><li>查看提交日志</li></ul><h3 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h3><ul><li>查看仓库的操作日志</li></ul><h3 id="git-reset-–hrad-commitId"><a href="#git-reset-–hrad-commitId" class="headerlink" title="git reset –hrad commitId"></a>git reset –hrad commitId</h3><ul><li>回溯到指定版本状态，每次commit之后都会生成一个对应的提交ID作为一个记号，制定某个记号，即可回滚到那个记号对应的状态。</li></ul><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><ul><li>抓取同步远程分支的分支信息</li></ul><h3 id="git-pull-origin-xxx"><a href="#git-pull-origin-xxx" class="headerlink" title="git pull origin xxx"></a>git pull origin xxx</h3><ul><li>拉去远程分支xxx的内容到当前分支</li></ul><h3 id="git-push-origin-分支名xxx"><a href="#git-push-origin-分支名xxx" class="headerlink" title="git push origin 分支名xxx"></a>git push origin 分支名xxx</h3><ul><li>推送当前分支内容状态到远程分支xxx</li></ul><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><ul><li>保存当前分支的修改内容到工作区,一个栈内</li><li>后面跟 pop ，将工作区最上层的保存的状态（修改内容）同步到当前分支</li><li>后面跟 list ，将保存的栈内容罗列出来</li><li>后面跟 apply [commitId] 恢复指定id记录的状态</li><li>后面跟 drop [commitId] 删除指定id的状态记录</li></ul><h3 id="git-cherry-pick-options-commitId"><a href="#git-cherry-pick-options-commitId" class="headerlink" title="git cherry-pick [options] [commitId]"></a>git cherry-pick [options] [commitId]</h3><ul><li><p>git cherry-pick commitid 把a分支提交的一个commitId内容，提交到b分支；</p></li><li><p>常用options:<br>  –quit                退出当前的chery-pick序列;<br>  –continue            继续当前的chery-pick序列;<br>  –abort               取消当前的chery-pick序列，恢复当前分支;<br>  -n, –no-commit       不自动提交;<br>  -e, –edit            编辑提交信息;</p></li></ul><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git分布式版本控制系统&quot;&gt;&lt;a href=&quot;#Git分布式版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;Git分布式版本控制系统&quot;&gt;&lt;/a&gt;Git分布式版本控制系统&lt;/h2&gt;&lt;p&gt;其版本管理的思想，类比树枝，有树干，树干可以衍生出多个枝干，每个枝干可以是不同的版本主题，而枝干内容也可以汇流到主树干中。&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://tigutf.github.io/categories/Github/"/>
    
    
      <category term="git" scheme="http://tigutf.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关键对话</title>
    <link href="http://tigutf.github.io/2019/01/20/%E5%85%B3%E9%94%AE%E5%AF%B9%E8%AF%9D/"/>
    <id>http://tigutf.github.io/2019/01/20/关键对话/</id>
    <published>2019-01-20T15:35:19.000Z</published>
    <updated>2019-01-20T15:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键对话"><a href="#关键对话" class="headerlink" title="关键对话"></a>关键对话</h2><p>生活工作，人与人的关系就建立在一次次的沟通对话中。<br>当对话的你们双方观点存在很大的差距；当对话存在很大的风险，对你可能产生莫大影响；当对话的双方情绪激烈；这都是关键的对话。<br><a id="more"></a></p><h3 id="面对关键对话的态度"><a href="#面对关键对话的态度" class="headerlink" title="面对关键对话的态度"></a>面对关键对话的态度</h3><blockquote><p>常见的关键对话：结束一段感情；和总是冒犯你的同事交谈；让朋友还钱；指出老板一些不对的地方；向言行不一的老板提建议；批评同事的工作表现；应对处于青春期的叛逆儿女；探讨关于出轨的问题；应对配偶严重的家庭暴力问题；和喜欢打听小道消息的同事交谈；要求升职加薪…</p></blockquote><p>叁無两时，我们就面对着关键的对话，逃避or情绪化的应对，都不符合我们最初的设想，那就坦诚的面对吧。</p><ul><li><strong>100%的坦诚，同时100%的尊重对方</strong></li></ul><p>从自己做起。忧虑与苦恼，往往无助于事情发展，保持自己心情的积极，更能让自己充沛精力去解决问题。情绪是控制在自己手里的，没有人能够伤害你，除非你自己允许，解决问题的方法从不是伤害或者被伤害。</p><p>战胜对方、惩罚对方、保持一团和气，这三种想法都是阻止你达成双赢沟通的障碍。</p><ul><li><strong>关注你的真实目的</strong></li></ul><p>1.学会在对话前和对话中问自己问题</p><blockquote><p>我希望为自己实现什么目标;<br>我希望为对方实现什么目标;<br>我希望为我们之间的关系实现什么目标;<br>要实现这些目标我该怎么做;</p></blockquote><p>2.为什么要问自己问题</p><blockquote><p>①为对话寻找意义。<br>在谈话中失控的人，都是因为已经忘记了谈话的初衷。想想看，一个为了挽救孩子的父亲，突然发飙，说随你的便吧！这时候他已经忘记了谈话的目标，成为了自己情绪的奴隶。只要记得谈话的目标，你的情绪就不容易失控。</p><p>②控制好自己的身体。<br>做自己的观察者，你的身体和思想才会受控。在紧张的时候，观察自己，和自己对话，能够让自己很快放松下来。</p></blockquote><h3 id="关键对话思维技巧"><a href="#关键对话思维技巧" class="headerlink" title="关键对话思维技巧"></a>关键对话思维技巧</h3><ol><li><p>学会对比说明：</p><blockquote><p>-阐明自己的目的 -不想看到的结果 -有没有两全其美的方法</p></blockquote></li><li><p>学会注意观察对话氛围</p><blockquote><p>学会双核观察（注意对话内容，同时注意对话氛围）。很多对话的失败，就是因为没有关注氛围。当你发现对方情绪不对或者气氛出现不利于对话的变化时，要停止内容方面的沟通，转而修复氛围。可以用我们前面讲到的对比说明的方法。也可以直接表示你理解对方的情绪。甚至要求把对话停一停，双方冷静一点再继续谈。</p></blockquote></li><li><p>尊重，保持对话安全</p><blockquote><p>强调共同目的，保持尊重。尊重就像空气。它存在的时候，你感觉不到它；但一旦它不存在了，你就立刻会感受到窒息。尊重有时不是语言的问题。你的心里不尊重一个人，你会通过你的肢体语言和眼神表达出来。甚至你下意识的动作都会被对方感觉。当氛围不对时，懂得道歉，对比说明修复主题。</p></blockquote></li><li><p>控制好自己的情绪</p><blockquote><p>留意三种常见的小聪明:<br>受害者想法：这可不是我的错;<br>大反派想法：这都是你造成的;<br>无助者想法：这事我也没办法。</p></blockquote></li></ol><h3 id="关键对话步骤"><a href="#关键对话步骤" class="headerlink" title="关键对话步骤"></a>关键对话步骤</h3><ol><li><p>分享事实经过</p><p>事实是最不会引起争议，最具说服力，最不会令人反感的内容，我们要学会从事实出发。</p></li><li><p>说出你的想法</p><p>a.不要堆积问题，自信地说出你的想法<br>b.注意气氛安全</p></li><li>征询对方观点，注意倾听，为彼此寻找共同点</li></ol><blockquote><p>比如：我想听听您的想法；我想知道您对我的看法；我希望听您坦诚地讲讲对我的意见和建议</p></blockquote><ol><li><p>做出试探表述</p></li><li><p>鼓励做出尝试</p></li></ol><h3 id="为下一次关键对话做准备"><a href="#为下一次关键对话做准备" class="headerlink" title="为下一次关键对话做准备"></a>为下一次关键对话做准备</h3><ul><li><p>从心开始（调整心态，自己首先摆脱暴力或沉默的状态，寻找双赢的可能）</p></li><li><p>注意观察（除了内容，还要关注谈话的氛围）</p></li><li><p>保证安全（如果对方情绪出现问题，想办法让对方觉得安全）</p></li><li><p>控制想法（不要轻易地觉得受到冒犯或者不公平，公平不重要，解决问题才重要）</p></li><li><p>陈述观点（说出事实，表达观点，对比说明）</p></li><li><p>了解动机（帮助对方调整情绪）</p></li></ul><p><strong>听樊登读书–《关键对话》笔记</strong></p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上~<br>分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关键对话&quot;&gt;&lt;a href=&quot;#关键对话&quot; class=&quot;headerlink&quot; title=&quot;关键对话&quot;&gt;&lt;/a&gt;关键对话&lt;/h2&gt;&lt;p&gt;生活工作，人与人的关系就建立在一次次的沟通对话中。&lt;br&gt;当对话的你们双方观点存在很大的差距；当对话存在很大的风险，对你可能产生莫大影响；当对话的双方情绪激烈；这都是关键的对话。&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tigutf.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>cccp系统设计-异常重试-分片应用</title>
    <link href="http://tigutf.github.io/2018/12/23/cccp%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E5%BC%82%E5%B8%B8%E9%87%8D%E8%AF%95-%E5%88%86%E7%89%87%E5%BA%94%E7%94%A8/"/>
    <id>http://tigutf.github.io/2018/12/23/cccp系统设计-异常重试-分片应用/</id>
    <published>2018-12-23T15:57:33.000Z</published>
    <updated>2019-03-23T14:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>任务处理异常重试机制<br><a id="more"></a></p><p>针对任务处理应用，若出现任务状态为-1（表示异常），或者状态为0（准备状态）且超出一定处理时长的，我们即认为该任务处理出现问题，需要重新尝试处理。</p><p>定义一个异常处理模块，针对不同任务设置对应的定时任务——扫描数据库任务表，若扫描到以上状态的任务，则重新发到kafka队列上，等待任务的重试。</p><p>通过以上方式保证了任务处理的健壮，然而也衍生了几个问题：</p><ul><li><p>生产集群环境下，多个异常处理的节点，同时扫描到对应的数据信息。</p><blockquote><p>为防止任务信息的重复扫描处理，利用redis添加一个分布式锁，得到锁的应用才进行数据扫描和处理，限制处理的数量，保证应用可及时处理。</p></blockquote></li><li><p>某些任务由于延时未及时处理，而异常模块又推送相同任务过来，导致任务处理应用幂等性问题</p><blockquote><p>针对任务处理结果——我们会生成对应的消息数据，通过相关业务字段给消息数据添加了唯一索引，保证相同任务只生成一条消息；这样子避免了消息的重复生成，但都是依靠数据库抛出重复主键的异常来处理，对数据库形成了不小的压力，所以针对任务，当进入处理时，便给该任务在redis缓存里面安置一个处理中的标志，处理完成后删除，重复任务进入时，若在缓存中存在该标志则不再进行处理。</p></blockquote></li></ul><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任务处理异常重试机制&lt;br&gt;
    
    </summary>
    
      <category term="系统设计" scheme="http://tigutf.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="异常处理" scheme="http://tigutf.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>散谈二-缓存</title>
    <link href="http://tigutf.github.io/2018/12/23/cccp%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%BC%93%E5%AD%98/"/>
    <id>http://tigutf.github.io/2018/12/23/cccp系统设计-缓存/</id>
    <published>2018-12-23T15:54:19.000Z</published>
    <updated>2018-12-23T15:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>在系统项目的设计开发中，我们避免不了需要到一些数据字典、参数配置、状态常数等，实时的总是从数据库或者文件中读取，是很耗性能的，而且速度也比较慢，所以使用缓存，当然是最佳的选择。</em><br><a id="more"></a></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.</p></blockquote><ul><li><p>Redis是一个开源的内存数据存储，可被用于做数据库、缓存和消息队列。官方文档中redis是可用做数据库，但实际应用中，redis用的是内存存储，当作数据库并存储到一半容量以上时，其性能是很差的，所以更多的是用作缓存和消息队列。</p></li><li><p>我们的系统中，使用redis做缓存中间件，应用启动加载时会先将系统相应数据字典、参数配置等加入redis缓存中，当每个应用需要用到时，再从redis中读取，因为储存于内存，响应非常快。在项目中采用两主两从三哨兵的模式，因为项目量级提升，从单节点转变成多节点（集群模式），所以原本只是Jedis（JedisPool）来连接redis进行操作，后面改造为SharedJedis，实现redis的分片，根据一致性Hash ID计算后分配到不同的分片上（即不同的节点redis）。</p></li><li><p>SharedJedis是jedis的jar包中提供的基于客户端分片的实现。<br>SharedJedis分片相关的代码基本都在redis.clients.util.Sharded类中。<br>下面是Sharded类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> shards，redis服务信息对象的list集合（ShardInfo的子类，如JedisShardInfo，存放了redis子节点的ip、端口、weight等信息）。</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> hash算法（默认一致性hash），jedis中指定了两种hash实现，一种是一致性hash，一种是基于md5的实现，在redis.clients.util.Hashing中指定的。</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> tagPattern，可以指定按照key的某一部分进行hash分片（比如我们可以将以order开头的key分配到redis节点1上，可以将以product开头的key分配到redis节点2上），默认情况下是根据整个key进行hash分片的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sharded</span><span class="params">(List&lt;S&gt; shards, Hashing algo, Pattern tagPattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.algo = algo;</span><br><span class="line">    <span class="keyword">this</span>.tagPattern = tagPattern;</span><br><span class="line">    initialize(shards);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Sharded构造函数中调用了initialize方法完成分片的一些初始化操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void initialize(List&lt;S&gt; shards) &#123;</span><br><span class="line">    nodes = new TreeMap&lt;Long, S&gt;();</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i != shards.size(); ++i) &#123;</span><br><span class="line">      final S shardInfo = shards.get(i);</span><br><span class="line">      if (shardInfo.getName() == null) for (int n = 0; n &lt; 160 * shardInfo.getWeight(); n++) &#123;</span><br><span class="line">        nodes.put(this.algo.hash(&quot;SHARD-&quot; + i + &quot;-NODE-&quot; + n), shardInfo);</span><br><span class="line">      &#125;</span><br><span class="line">      else for (int n = 0; n &lt; 160 * shardInfo.getWeight(); n++) &#123;</span><br><span class="line">        nodes.put(this.algo.hash(shardInfo.getName() + &quot;*&quot; + n), shardInfo);</span><br><span class="line">      &#125;</span><br><span class="line">      resources.put(shardInfo, shardInfo.createResource());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>首先根据redis节点集合信息创建虚拟节点（一致性hash上0~2^32之间的点），通过上面的源码可以看出，根据每个redis节点的name计算出对应的hash值（如果没有配置节点名称，就是用默认的名字），并创建了160<em>weight个虚拟节点，weight默认情况下等于1，如果某个节点的配置较高，可以适当的提高虚拟节点的个数，将更多的请求打到这个节点上。SharedJedis并不支持多个key的操作，例如 keys </em> ；因为多个key计算出来的分片可能不一样，读需要多个节点同时计算后做归并交集才能得到结果，写的时候无法判断所有key是否都写成功，一致性得不到保障。</p></blockquote><ul><li>SharedJedis的这个实现，参照了一致性Hash算法(consistent hashing)。<br>可参考：<br><a href="http://blog.csdn.net/cywosp/article/details/23397179" target="_blank" rel="noopener">http://blog.csdn.net/cywosp/article/details/23397179</a></li></ul><h2 id="Guava-cacheLoader"><a href="#Guava-cacheLoader" class="headerlink" title="Guava cacheLoader"></a>Guava cacheLoader</h2><p><strong><font color="blue"><br>Guava是一个超棒的工具类库~<br>Guava工程包含了若干被Google的Java项目广泛依赖的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等。</font></strong></p><p>LocalCache是一种很好的优化方案，它可以成倍的提高处理效率。Guava cache只是它其中一种方案选择。在我们的系统功能设计中，我们用到的是LoadingCache<k,t>。若说Redis为一级缓存，CacheLoader则是二级缓存；</k,t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据加载器</span></span><br><span class="line">CacheLoader&lt;K, T&gt; loader = <span class="keyword">new</span> CacheLoader&lt;K, T&gt; () &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">load</span><span class="params">(K Key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// TODO load data.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Guava cache 的创建</span></span><br><span class="line"><span class="keyword">return</span> CacheBuilder.newBuilder()</span><br><span class="line">  .maximumSize(<span class="number">1000</span>)<span class="comment">//最大容量</span></span><br><span class="line">  .expireAfterWrite(<span class="number">2</span>, TimeUnit.MINUTES)<span class="comment">//缓存写入后的过期时间2min</span></span><br><span class="line">  .build(loader);</span><br></pre></td></tr></table></figure><ul><li>我是用的CacheLoader的方式，先定义一个CacheLoader加载器,然后用CacheBuilder进行构建，流式定义缓存大小、缓存失效时间、缓存刷新时间等等（Guava Cache提供了多种缓存机制）。LoadingCache执行时，先从已有缓存中通过key查找，若没有则执行load方法加载一遍key的值。<font color="Orange"><strong>注意：当执行load查询加载数据也都查询不到时，Loading Cache的get方法会直接抛出空指针异常，这是需要防范的。建议可以配合Option<t>一起使用，即CacheLoader&lt;K,Option<t>&gt;这样子定义。Guava对NPE有其严谨的规范。</t></t></strong></font></li></ul><p>LoadingCache有另一种实现方式——Callable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testcallableCache</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().maximumSize(<span class="number">1000</span>).build();  </span><br><span class="line">    String resultVal = cache.get(<span class="string">"Hello"</span>, <span class="keyword">new</span> Callable&lt;String&gt;() &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            <span class="comment">//TODO 获取值  </span></span><br><span class="line">            System.out.println(<span class="string">"Hello "</span>);            </span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    System.out.println(<span class="string">"Hello "</span> + resultVal);</span><br><span class="line"></span><br><span class="line">    resultVal = cache.get(<span class="string">"test"</span>, <span class="keyword">new</span> Callable&lt;String&gt;() &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">            <span class="comment">//TODO 获取值</span></span><br><span class="line">            System.out.println(<span class="string">"Test"</span>);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    System.out.println(<span class="string">"test value : "</span> + resultVal);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;在系统项目的设计开发中，我们避免不了需要到一些数据字典、参数配置、状态常数等，实时的总是从数据库或者文件中读取，是很耗性能的，而且速度也比较慢，所以使用缓存，当然是最佳的选择。
&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="缓存" scheme="http://tigutf.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis|" scheme="http://tigutf.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>散谈一-多数据源</title>
    <link href="http://tigutf.github.io/2018/12/23/cccp%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://tigutf.github.io/2018/12/23/cccp系统设计-多数据源/</id>
    <published>2018-12-23T15:53:51.000Z</published>
    <updated>2018-12-23T15:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目开发中涉及多个数据库，每个服务又需要连接多个数据库，所以这就需要多数据源切换了。</p><a id="more"></a><h2 id="AbstractRoutingDataSource实现多数据源切换"><a href="#AbstractRoutingDataSource实现多数据源切换" class="headerlink" title="AbstractRoutingDataSource实现多数据源切换"></a>AbstractRoutingDataSource实现多数据源切换</h2><p>  在spring下我们要进行数据操作：</p><ol><li>sessionFactory会话工厂、transactionManager事务管理器设置dataSource，数据库连接信息；</li><li>获取数据库的连接会话session,通过sessionFactory获取；</li><li>通过会话session连接，与事务管理器，实现数据库操作，并保证事务完整。</li></ol><p>由此可见，要实现数据源切换，主要是能实现dataSource的动态更改;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Abstract &#123;@link javax.sql.DataSource&#125; implementation that routes &#123;@link #getConnection()&#125;</span><br><span class="line">calls to one of various target DataSources based on a lookup key. The latter is usually</span><br><span class="line">(but not necessarily) determined through some thread-bound transaction context.</span><br></pre></td></tr></table></figure></p><p> AbstractRoutingDataSource–直译为抽象路由数据源，以上是spring中对它的解释：当获取某个数据库连接时，是基于lookup key来确定的。</p><ul><li>多数据源的动态切换，在程序运行时，把数据源数据源动态植入到程序中，灵活的进行数据源切换。</li><li>基于多数据源的动态切换，我们可以实现读写分离，这么做缺点也很明显，无法动态的增加数据源。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1）动态DataSource ,继承AbstractRoutingDataSource</span><br><span class="line">class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class="line">   protected Object determineCurrentLookupKey() &#123;</span><br><span class="line">       return DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在springboot中用代码来配置动态的数据源，实现ImportBeanDefinitionRegistrar接口，应用加载时注册导入bean的定义，实现EnvironmentAware接口是为了获取系统环境信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 动态注册数据源加入spring容器中管理</span></span><br><span class="line"><span class="comment">* 初始化数据源和提供了执行动态切换数据源的工具类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceRegister</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">EnvironmentAware</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定默认数据源(springboot2.0默认数据源是hikari如何想使用其他数据源可以自己配置)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATASOURCE_TYPE_DEFAULT = <span class="string">"com.zaxxer.hikari.HikariDataSource"</span>;</span><br><span class="line">  <span class="comment">//默认数据源</span></span><br><span class="line">  <span class="keyword">private</span> DataSource defaultDataSource;</span><br><span class="line">  <span class="comment">//用户自定义数据源</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, DataSource&gt; customDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">      initDefaultDataSource(environment);</span><br><span class="line">      initCustomDataSources(environment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDefaultDataSource</span><span class="params">(Environment env)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 读取主数据源</span></span><br><span class="line">      Map&lt;String, Object&gt; dsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      dsMap.put(<span class="string">"driver"</span>, env.getProperty(<span class="string">"spring.datasource.hikari.driver-class-name"</span>));</span><br><span class="line">      dsMap.put(<span class="string">"url"</span>, env.getProperty(<span class="string">"spring.datasource.hikari.jdbc-url"</span>));</span><br><span class="line">      dsMap.put(<span class="string">"username"</span>, env.getProperty(<span class="string">"spring.datasource.hikari.username"</span>));</span><br><span class="line">      dsMap.put(<span class="string">"password"</span>, env.getProperty(<span class="string">"spring.datasource.hikari.password"</span>));</span><br><span class="line">      defaultDataSource = buildDataSource(dsMap);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCustomDataSources</span><span class="params">(Environment env)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 读取配置文件获取更多数据源</span></span><br><span class="line">      String dsPrefixs = env.getProperty(<span class="string">"spring.datasource.names"</span>);</span><br><span class="line">      <span class="keyword">for</span> (String dsPrefix : dsPrefixs.split(<span class="string">","</span>)) &#123;</span><br><span class="line">          <span class="comment">// 多个数据源</span></span><br><span class="line">          Map&lt;String, Object&gt; dsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">          String firstStr = <span class="string">"spring.datasource."</span>;</span><br><span class="line">          dsMap.put(<span class="string">"driver"</span>, env.getProperty(firstStr + dsPrefix + <span class="string">".hikari.driver-class-name"</span>));</span><br><span class="line">          dsMap.put(<span class="string">"url"</span>, env.getProperty(firstStr + dsPrefix + <span class="string">".hikari.jdbc-url"</span>));</span><br><span class="line">          dsMap.put(<span class="string">"username"</span>, env.getProperty(firstStr + dsPrefix + <span class="string">".hikari.username"</span>));</span><br><span class="line">          dsMap.put(<span class="string">"password"</span>, env.getProperty(firstStr + dsPrefix + <span class="string">".hikari.password"</span>));</span><br><span class="line">          DataSource ds = buildDataSource(dsMap);</span><br><span class="line">          customDataSources.put(dsPrefix, ds);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">buildDataSource</span><span class="params">(Map&lt;String, Object&gt; dataSourceMap)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Object type = dataSourceMap.get(<span class="string">"type"</span>);</span><br><span class="line">          <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">              type = DATASOURCE_TYPE_DEFAULT;<span class="comment">// 默认DataSource</span></span><br><span class="line">          &#125;</span><br><span class="line">          Class&lt;? extends DataSource&gt; dataSourceType;</span><br><span class="line">          dataSourceType = (Class&lt;? extends DataSource&gt;) Class.forName((String) type);</span><br><span class="line">          String driverClassName = dataSourceMap.get(<span class="string">"driver"</span>).toString();</span><br><span class="line">          String url = dataSourceMap.get(<span class="string">"url"</span>).toString();</span><br><span class="line">          String username = dataSourceMap.get(<span class="string">"username"</span>).toString();</span><br><span class="line">          String password = dataSourceMap.get(<span class="string">"password"</span>).toString();</span><br><span class="line">          <span class="comment">// 自定义DataSource配置</span></span><br><span class="line">          DataSourceBuilder factory = DataSourceBuilder.create().driverClassName(driverClassName).url(url)</span><br><span class="line">                  .username(username).password(password).type(dataSourceType);</span><br><span class="line">          <span class="keyword">return</span> factory.build();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line">      Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">      <span class="comment">//添加默认数据源</span></span><br><span class="line">      targetDataSources.put(<span class="string">"main"</span>, <span class="keyword">this</span>.defaultDataSource);</span><br><span class="line">      DynamicDataSourceContextHolder.dataSourceIds.add(<span class="string">"main"</span>);</span><br><span class="line">      <span class="comment">//添加其他数据源</span></span><br><span class="line">      targetDataSources.putAll(customDataSources);</span><br><span class="line">      <span class="keyword">for</span> (String key : customDataSources.keySet()) &#123;</span><br><span class="line">          DynamicDataSourceContextHolder.dataSourceIds.add(key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建DynamicDataSource</span></span><br><span class="line">      GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">      beanDefinition.setBeanClass(DynamicDataSource.class);</span><br><span class="line">      beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">      MutablePropertyValues mpv = beanDefinition.getPropertyValues();</span><br><span class="line">      mpv.addPropertyValue(<span class="string">"defaultTargetDataSource"</span>, defaultDataSource);</span><br><span class="line">      mpv.addPropertyValue(<span class="string">"targetDataSources"</span>, targetDataSources);</span><br><span class="line">      <span class="comment">//注册 - BeanDefinitionRegistry</span></span><br><span class="line">      beanDefinitionRegistry.registerBeanDefinition(<span class="string">"dataSource"</span>, beanDefinition);</span><br><span class="line">      log.info(<span class="string">"Dynamic DataSource Registry"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当代理类-动态数据源DynamicDataSource定义好，具体各个dataSource也动态注入spring中，现在需要实现如何更改DynamicDataSource的looku key的变化，用ThreadLocal来保证线程安全,存储对应dataSource的关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicDataSourceContextHolder &#123;</span><br><span class="line"></span><br><span class="line">    //存放当前线程使用的数据源类型信息</span><br><span class="line">    private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;String&gt;();</span><br><span class="line">    //存放数据源id</span><br><span class="line">    public static List&lt;String&gt; dataSourceIds = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    //设置数据源</span><br><span class="line">    public static void setDataSourceType(String dataSourceType) &#123;</span><br><span class="line">        contextHolder.set(dataSourceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取数据源</span><br><span class="line">    public static String getDataSourceType() &#123;</span><br><span class="line">        return contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //清除数据源</span><br><span class="line">    public static void clearDataSourceType() &#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断当前数据源是否存在</span><br><span class="line">    public static boolean isContainsDataSource(String dataSourceId) &#123;</span><br><span class="line">        return dataSourceIds.contains(dataSourceId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个SessionFactory实现数据源切换"><a href="#多个SessionFactory实现数据源切换" class="headerlink" title="多个SessionFactory实现数据源切换"></a>多个SessionFactory实现数据源切换</h2><blockquote><p>在高并发，一个方法中需要切换多个数据进行操作，还要保证事务管理的情况下，第一种方法中，我们需要频繁的修改threadLocal中的值，及时调整ThreadLocal中的值，否则当线程依旧绑定着上一个key时，容易发生Table not exist的异常，代码逻辑也就变得相对复杂。</p></blockquote><p>在spring4版本中也是支持多数据库切换的，设置多个SessionFactory和transactionManager，对应多个dataSource；主要也是以空间换取的功能实现；通过事务注解即可切换对应的数据源，并保证事务的一致性。</p><blockquote><p>代码就不贴了，DataSource、SessionFactory和transactionManager分别定义多个，一一对应。<br><!-- end --></p><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目开发中涉及多个数据库，每个服务又需要连接多个数据库，所以这就需要多数据源切换了。&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计|数据库" scheme="http://tigutf.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="多数据源|mysql" scheme="http://tigutf.github.io/tags/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90-mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java序列化</title>
    <link href="http://tigutf.github.io/2018/12/21/%E5%BA%8F%E5%88%97%E5%8C%961/"/>
    <id>http://tigutf.github.io/2018/12/21/序列化1/</id>
    <published>2018-12-20T17:32:02.000Z</published>
    <updated>2018-12-20T17:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java原生流的方法进行的序列化"><a href="#Java原生流的方法进行的序列化" class="headerlink" title="Java原生流的方法进行的序列化"></a>Java原生流的方法进行的序列化</h2><p>类实现Serializable接口，标记该类对象可以被序列化。此时，Java序列化写入不仅是完整的类名，也包含整个类的定义，包含所有被引用的类，影响性能和效率；<br>通过实现Externalizable接口，这是可能优化Java序列化的。实现此接口，避免写出整个类定义，只是类名被写入。它需要你实施readExternal和writeExternal方法方法的，所以需要做一些工作，但相比仅仅是实现Serializable更快，更高效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//对象转成字节码      </span><br><span class="line">ByteArrayOutputStream byteArrayOutputStream = new  ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">outputStream.writeObject(GetUser());</span><br><span class="line">byte[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">outputStream.close();      //字节码转换成对象     </span><br><span class="line">ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);      </span><br><span class="line">ObjectInputStream inputStream = new ObjectInputStream(byteArrayInputStream);                       User result = (User) inputStream.readObject();      inputStream.close();</span><br></pre></td></tr></table></figure></p><h2 id="Json序列化"><a href="#Json序列化" class="headerlink" title="Json序列化"></a>Json序列化</h2><h2 id="FastJson序列化"><a href="#FastJson序列化" class="headerlink" title="FastJson序列化"></a>FastJson序列化</h2><h2 id="Protobuff序列化"><a href="#Protobuff序列化" class="headerlink" title="Protobuff序列化"></a>Protobuff序列化</h2><a id="more"></a><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java原生流的方法进行的序列化&quot;&gt;&lt;a href=&quot;#Java原生流的方法进行的序列化&quot; class=&quot;headerlink&quot; title=&quot;Java原生流的方法进行的序列化&quot;&gt;&lt;/a&gt;Java原生流的方法进行的序列化&lt;/h2&gt;&lt;p&gt;类实现Serializable接口，标记该类对象可以被序列化。此时，Java序列化写入不仅是完整的类名，也包含整个类的定义，包含所有被引用的类，影响性能和效率；&lt;br&gt;通过实现Externalizable接口，这是可能优化Java序列化的。实现此接口，避免写出整个类定义，只是类名被写入。它需要你实施readExternal和writeExternal方法方法的，所以需要做一些工作，但相比仅仅是实现Serializable更快，更高效。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对象转成字节码      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ByteArrayOutputStream byteArrayOutputStream = new  ByteArrayOutputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outputStream.writeObject(GetUser());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte[] bytes = byteArrayOutputStream.toByteArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outputStream.close();      //字节码转换成对象     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ObjectInputStream inputStream = new ObjectInputStream(byteArrayInputStream);                       User result = (User) inputStream.readObject();      inputStream.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Json序列化&quot;&gt;&lt;a href=&quot;#Json序列化&quot; class=&quot;headerlink&quot; title=&quot;Json序列化&quot;&gt;&lt;/a&gt;Json序列化&lt;/h2&gt;&lt;h2 id=&quot;FastJson序列化&quot;&gt;&lt;a href=&quot;#FastJson序列化&quot; class=&quot;headerlink&quot; title=&quot;FastJson序列化&quot;&gt;&lt;/a&gt;FastJson序列化&lt;/h2&gt;&lt;h2 id=&quot;Protobuff序列化&quot;&gt;&lt;a href=&quot;#Protobuff序列化&quot; class=&quot;headerlink&quot; title=&quot;Protobuff序列化&quot;&gt;&lt;/a&gt;Protobuff序列化&lt;/h2&gt;
    
    </summary>
    
      <category term="序列化" scheme="http://tigutf.github.io/categories/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="Java|序列化" scheme="http://tigutf.github.io/tags/Java-%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>读书-解忧杂货店</title>
    <link href="http://tigutf.github.io/2018/12/10/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    <id>http://tigutf.github.io/2018/12/10/解忧杂货店/</id>
    <published>2018-12-09T17:10:48.000Z</published>
    <updated>2019-01-14T15:36:34.007Z</updated>
    
    <content type="html"><![CDATA[<p>看过不少日本动漫，但很少读过日本作者的书籍，看了一半《解忧杂货店》，我已经被东野圭吾的文字抓进去了。<br><a id="more"></a></p><blockquote><p>19世纪七八十年代与现代，相差34年的时空交错；</p><p>杂货店老板–一位年迈的老人浪矢雄治，为周边的小孩大人提供答疑解忧，从不敷衍了事。卷铁门旁的邮箱–收取来咨询的信封，后门牛奶箱则放置回信。<br>老人周而复始的思考每位来咨询的问题，绞尽脑汁地写下回信。</p><p>交错的时空，神奇的梦境，让老人得以知道他的回复，影响了哪些人，产生了哪些意义；或许言者无意，然听者有心；老人心里始终谦逊，认真的对待每个问题。<br>他知道，每个烦恼忧愁的咨询后面，当事者都有了确定的选择，然而他们还是需要有一个可以商量的对象，这是心里精神上的需求。。</p><p>最后的咨询，一张空白的信纸，这是老爷子遇到的最难的一次咨询，也是最后的一次~之前所有咨询的信，都描述了各个咨询者的问题、烦恼，或者这就是一张地图，有线有方向也有点，只是咨询的主人公不知道怎么走，抑或是不知道往哪走；而这空白的信纸，主人公可能迷茫着不知道该咨询什么，不知道自己有什么方向可寻，在老人看来，或许这白纸，更展现着更大的可能性，更大的自由，为自己的生活去努力，那就好。</p><p>当所有咨询与烦恼的情节串联了起来，故事的玄妙精彩不言而喻。<br>生活也好，工作也罢，梦想理想，我们都应该尽自己最大努力的实现，去践行~<br>存在即是合理，不必太过执着忧愁，珍惜当下，珍惜眼前人，我们都需要有更大的胸怀去分享/去交流！<br><!-- end --></p><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看过不少日本动漫，但很少读过日本作者的书籍，看了一半《解忧杂货店》，我已经被东野圭吾的文字抓进去了。&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tigutf.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="东野圭吾" scheme="http://tigutf.github.io/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习一</title>
    <link href="http://tigutf.github.io/2018/11/20/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://tigutf.github.io/2018/11/20/设计原则/</id>
    <published>2018-11-20T15:22:48.000Z</published>
    <updated>2019-02-01T17:41:54.444Z</updated>
    
    <content type="html"><![CDATA[<p>踉踉跄跄coding几年，懂得coding，知道OOD，才明白更应该去理解面向对象设计的原则。</p><blockquote><p>设计模式，是前辈大神们经过实践而总结出来的经验。以设计原则去设计编程，为的就是让代码更易于理解，保证代码的可靠性，确保系统项目的扩展性。~代码不是一个人的，让多数人都能去读懂和理解，才是好代码</p></blockquote><a id="more"></a><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>有这么一段概括:</p><ol><li>单一职责原则告诉我们实现类、接口要职责单一；</li><li>里氏替换原则告诉我们不要破坏继承体系；</li><li>依赖倒置原则告诉我们要面向接口编程；</li><li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li><li>迪米特法则告诉我们要降低耦合；</li><li>而开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭。</li></ol><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><blockquote><p>Single Responsibility Principle, 简称SRP</p></blockquote><p><strong>单一职责原则的定义是:应该有且仅有一个原因引起类的变更；</strong><br>从业务角度来说，引起一个接口or类发生变化的原因，应该是一个有限制的单纯的最小业务单元；</p><blockquote><p>例子1：RBAC模型，Role-Based Access Control,基于角色的的访问控制。系统用户信息定义是我们总遇到的业务之一。用户信息接口，若我们直接定义用户属性（姓名、密码、所在部门）+ 用户行为（修改姓名、修改密码等）在一个接口中，该接口同时承担用户属性信息和用户行为的职责，这是容易引起混淆的，这不符合单一职责原则的。拆分为两个接口，不同场景下使用不同的接口（信息的查询和操作分开），各司其职，一目了然。</p><p>例子2：电话通话的用例定义：拨号、通话、回应、挂机。一个接口IMobile将电话通话全涵盖。看似可以，但包含两层职责：a.拨号和挂断，这是通话协议管理; b.通话回应则是数据传送。实际业务，这两层职责相关联，若两个接口两个类，一个电话要两个类来组合定义，强耦合关系，增加了类的复杂度，这似乎也不太合理。换种角度，两种职责，定义两个接口，由一个电话类实现这两个接口，将两个职责融合在一个类中。对外发布仅仅是接口，而非实现类，这样也体现了接口的单一职责。</p></blockquote><p>通过上面的例子，我们来总结一下单一职责原则有什么好处：</p><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li><li>可读性提高，复杂性降低，那当然可读性提高了；</li><li>可维护性提高，可读性提高，那当然更容易维护了；</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ul><p><strong><em>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或 类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。具体业务需求具体分析，灵活转变。</em></strong></p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote><p>Liskov Substitution Principle，LSP</p></blockquote><ul><li><p>第一种定义，也是最正宗的定义：If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.（如果对每一个类型为S的对象o1，都有类型为T的对 象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。）</p></li><li><p>第二种定义：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.（所有引用基类的地方必须能透明地使用其子类的<br>对象。）</p></li></ul><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;踉踉跄跄coding几年，懂得coding，知道OOD，才明白更应该去理解面向对象设计的原则。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式，是前辈大神们经过实践而总结出来的经验。以设计原则去设计编程，为的就是让代码更易于理解，保证代码的可靠性，确保系统项目的扩展性。~代码不是一个人的，让多数人都能去读懂和理解，才是好代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Design pattern" scheme="http://tigutf.github.io/categories/Design-pattern/"/>
    
    
      <category term="设计原则|面向对象" scheme="http://tigutf.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>策略模式--实现规则配置以处理任务</title>
    <link href="http://tigutf.github.io/2018/11/05/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E5%A4%84%E7%90%86/"/>
    <id>http://tigutf.github.io/2018/11/05/策略模式-实现规则配置处理/</id>
    <published>2018-11-05T15:22:48.000Z</published>
    <updated>2019-01-14T15:35:15.523Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my T-SPACE~</p><p>由于业务需求，会有不同渠道的信息组合，现有系统设计耦合度太高，不好扩展。所以对此进行重构，添加规则配置，以应对不同组合的需求信息获取和执行。这里边用到了策略模式。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="策略模式的概念"><a href="#策略模式的概念" class="headerlink" title="策略模式的概念"></a>策略模式的概念</h3><p>引用阎宏博士的《JAVA与模式》一书描述：策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>面向对象编程有三大特性：封装、继承、多态。</p><ol><li>封装–隐藏了类的内部实现机制，对外只暴露相关的访问方法，内部实现细节对外是不可知的。</li><li>继承–对父类代码的重用。</li><li>多态–在程序中定义的引用变量所指向的具体类型，以及通过该变量而指向的方法调用有不同种类型/实现（多种形态），具体引用了什么方法要在程序运行时依据具体指向的实例对象来决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</li></ol><p>该策略模式的实现也是利用了多态的这一特性。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessStrategy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 结果集映射key</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operate</span><span class="params">(Map result, List&lt;T&gt; params, String key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtestProcess</span> <span class="keyword">implements</span> <span class="title">ProcessStrategy</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Map result, List&lt;String&gt; params, String key)</span> </span>&#123;</span><br><span class="line">        System.out.println(params.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//TODO 算法逻辑</span></span><br><span class="line">        result.put(key,<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtestProcess</span> <span class="keyword">implements</span> <span class="title">ProcessStrategy</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Map result, List&lt;Integer&gt; params, String key)</span> </span>&#123;</span><br><span class="line">        System.out.println(params.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//TODO 算法逻辑</span></span><br><span class="line">        result.put(key,<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义工厂类"><a href="#定义工厂类" class="headerlink" title="定义工厂类"></a>定义工厂类</h3><p>定义Factory，程序运行中通过该类获取具体实例对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ProcessStrategy instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessStrategy <span class="title">getInstance</span><span class="params">(String clzName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            instance = (ProcessStrategy)Class.forName(clzName).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Class not found.check the param 'clzName'. "</span>);</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="枚举配置"><a href="#枚举配置" class="headerlink" title="枚举配置"></a>枚举配置</h3><p>通过以上代码，策略模式相关的实现大致完成，具体业务代码中使用ProcessFactory即可获取不同策略的实现方法，而要实现配置化，自动装载配置以应对不同的场景逻辑，还需要实现定义好我们的配置枚举类（配置表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeEnum &#123;</span><br><span class="line"></span><br><span class="line">    TYPE_ENUM_A(<span class="string">"A"</span>,<span class="string">"com..impl.AtestProcess"</span>),</span><br><span class="line">    TYPE_ENUM_B(<span class="string">"B"</span>,<span class="string">"com..impl.BtestProcess"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key ;</span><br><span class="line">    <span class="keyword">private</span>  String value;</span><br><span class="line"></span><br><span class="line">    TypeEnum(String key, String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TypeEnum typeEnum : TypeEnum.values())&#123;</span><br><span class="line">            <span class="keyword">if</span> (typeEnum.key.equalsIgnoreCase(key))&#123;</span><br><span class="line">                <span class="keyword">return</span> typeEnum.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List params = Arrays.asList(<span class="string">"1"</span>,<span class="string">"3"</span>,<span class="string">"12"</span>);</span><br><span class="line">        String className = TypeEnum.getValue(<span class="string">"A"</span>);</span><br><span class="line">        ProcessStrategy ps = ProcessFactory.getInstance(className);</span><br><span class="line">        ps.operate(result, params, <span class="string">"testA"</span>);</span><br><span class="line">        String className = TypeEnum.getValue(<span class="string">"B"</span>);</span><br><span class="line">        ps = ProcessFactory.getInstance(className);</span><br><span class="line">        ps.operate(result, params, <span class="string">"testB"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>业务场景中需要走A还是走B，将条件记录于数据库/缓存redis/property文件中，当程序运行时再和TypeEnum中匹配，通过ProcessFactory捕获相应的实例对象来处理。当业务扩展，策略增多，我们只需要添加具体的接口实现，另外配置枚举对应，而不影响原来代码的主业务执行。</p><p><strong>策略模式一方面也帮我们减少了if/else代码块过多而带来的sonar问题。</strong></p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my T-SPACE~&lt;/p&gt;
&lt;p&gt;由于业务需求，会有不同渠道的信息组合，现有系统设计耦合度太高，不好扩展。所以对此进行重构，添加规则配置，以应对不同组合的需求信息获取和执行。这里边用到了策略模式。&lt;/p&gt;
    
    </summary>
    
      <category term="Design pattern" scheme="http://tigutf.github.io/categories/Design-pattern/"/>
    
    
      <category term="Java|模式|多态" scheme="http://tigutf.github.io/tags/Java-%E6%A8%A1%E5%BC%8F-%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>从0开始的小程序之旅</title>
    <link href="http://tigutf.github.io/2018/10/18/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%97%85/"/>
    <id>http://tigutf.github.io/2018/10/18/从0开始小程序之旅/</id>
    <published>2018-10-18T14:49:48.000Z</published>
    <updated>2019-01-14T15:34:02.344Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to T-SPACE~<br>本文将介绍小程序的小白入手，从小程序的申请到小程序的开发，一起入门！</p><a id="more"></a><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p><img src="https://i.imgur.com/yUH2STN.png" alt=""></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18092022" target="_blank" rel="noopener">开发者工具</a></p><ol><li>微信的开发者工具需要微信扫描登陆后才能打开。</li><li>新建项目选择小程序项目，选择代码存放的硬盘路径，填入刚刚申请到的小程序的 AppID，给你的项目起个名字，最后，勾选 “创建 QuickStart 项目” （注意: 你要选择一个空的目录才会有这个选项），点击确定，你就得到了你的第一个小程序了。</li><li>点击工具上的编译按钮，可以在工具的左侧模拟器界面看到这个小程序的表现，也可以点击预览按钮，通过微信的扫一扫在手机上体验你的第一个小程序。</li></ol><h3 id="小程序结构"><a href="#小程序结构" class="headerlink" title="小程序结构"></a>小程序结构</h3><p><img src="https://i.imgur.com/cLt5aLE.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- pages --&gt; 小程序所有页面存放的文件夹</span><br><span class="line">- libs  --&gt; 引进的js库</span><br><span class="line">- img   --&gt; 图片文件夹</span><br><span class="line"><span class="number">1.</span> app.json // 后缀的 JSON 配置文件</span><br><span class="line"><span class="number">2.</span> app.wxml // 后缀的 WXML 模板文件</span><br><span class="line"><span class="number">3.</span> app.wxss // 后缀的 WXSS 样式文件</span><br><span class="line"><span class="number">4.</span> app.js   // 后缀的 JS 脚本逻辑文件</span><br></pre></td></tr></table></figure><h4 id="小程序配置-app-json"><a href="#小程序配置-app-json" class="headerlink" title="小程序配置 app.json"></a>小程序配置 app.json</h4><p>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。QuickStart 项目里边的 app.json 配置内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&amp;#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&amp;#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure></p><p>我们简单说一下这个配置各个项的含义:</p><ul><li>pages字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li>window字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。<br>其他配置项细节可以参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">小程序的配置 app.json</a>。</li></ul><h4 id="工具配置-project-config-json"><a href="#工具配置-project-config-json" class="headerlink" title="工具配置 project.config.json"></a>工具配置 project.config.json</h4><p>通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。<br>考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p><h4 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h4><p>与上面的app.json类似，但是是针对具体某一个页面的，让开发者可以独立定义每个页面的一些属性。</p><h4 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a>WXML 模板</h4><ol><li>编写网页时我们经常都是采用HTML+CSS+JS的组合，而WXML就相当于html，用来描述当前这个页面的结构。</li><li>在网页的一般开发流程中，我们通常会通过 JS 操作 DOM (对应 HTML 的描述产生的树)，以引起界面的一些变化响应用户的行为。例如，用户点击某个按钮的时候，JS 会记录一些状态到 JS 变量里边，同时通过 DOM API 操控 DOM 的属性或者行为，进而引起界面一些变化。当项目越来越大的时候，你的代码会充斥着非常多的界面交互逻辑和程序的各种状态变量，显然这不是一个很好的开发模式，因此就有了 MVVM 的开发模式（例如 React, Vue），提倡把渲染和逻辑分离。简单来说就是不要再让 JS 直接操控 DOM，JS 只需要管理状态即可，然后再通过一种模板语法来描述状态和界面结构的关系即可。<br>小程序的框架也是用到了这个思路，如果你需要把一个 Hello World 的字符串显示在界面上。<br>WXML 是这么写 :<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text&gt;&amp;#123;&amp;#123;msg&amp;#125;&amp;#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure></li></ol><p>JS 只需要管理状态即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.setData(&amp;#123; msg: &quot;Hello World&quot; &amp;#125;)</span><br></pre></td></tr></table></figure></p><p>通过 &#123;&#123; &#125;&#125; 的语法把一个变量绑定到界面上，我们称为数据绑定。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 if/else, for等控制能力，在小程序里边，这些控制能力都用 wx: 开头的属性来表达。</p><h4 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h4><p>WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。<br>新增了尺寸单位。在写 CSS 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。WXSS 在底层支持新的尺寸单位 rpx ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。<br>提供了全局的样式和局部样式。和前边 app.json, page.json 的概念相同，你可以写一个 app.wxss 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 page.wxss 仅对当前页面生效。<br>此外 WXSS 仅支持部分 CSS 选择器</p><h4 id="JS-交互逻辑"><a href="#JS-交互逻辑" class="headerlink" title="JS 交互逻辑"></a>JS 交互逻辑</h4><p>一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 JS 脚本文件来处理用户的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&lt;/view&gt;</span><br><span class="line">&lt;button bindtap=&quot;clickMe&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>点击 button 按钮的时候，我们希望把界面上 msg 显示成 “Hello World”，于是我们在 button 上声明一个属性: bindtap ，在 JS 文件里边声明了 clickMe 方法来响应这次点击操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&amp;#123;</span><br><span class="line">  clickMe: function() &amp;#123;</span><br><span class="line">    this.setData(&amp;#123; msg: &quot;Hello World&quot; &amp;#125;)</span><br><span class="line">  &amp;#125;</span><br><span class="line">&amp;#125;)</span><br></pre></td></tr></table></figure></p><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>使用开发者工具可以预览小程序，帮助开发者检查小程序在移动客户端上的真实表现。<br>点击开发者工具顶部操作栏的预览按钮，开发者工具会自动打包当前项目，并上传小程序代码至微信的服务器，成功之后会在界面上显示一个二维码。使用当前小程序开发者的微信扫码即可看到小程序在手机客户端上的真实表现。</p><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>同预览不同，上传代码是用于提交体验或者审核使用的。<br>点击开发者工具顶部操作栏的上传按钮，填写版本号以及项目备注，需要注意的是，这里版本号以及项目备注是为了方便管理员检查版本使用的，开发者可以根据自己的实际要求来填写这两个字段。<br>上传成功之后，登录小程序管理后台 - 开发管理 - 开发版本 就可以找到刚提交上传的版本了。<br>可以将这个版本设置 体验版 或者是 提交审核</p><h3 id="小程序的版本"><a href="#小程序的版本" class="headerlink" title="小程序的版本"></a>小程序的版本</h3><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">开发版本</td><td style="text-align:center">使用开发者工具，可将代码上传到开发版本中。开发版本只保留每人最新的一份上传的代码。点击提交审核，可将代码提交审核。开发版本可删除，不影响线上版本和审核中版本的代码。</td></tr><tr><td style="text-align:left">审核中版本</td><td style="text-align:center">只能有一份代码处于审核中。有审核结果后可以发布到线上，也可直接重新提交审核，覆盖原审核版本。</td></tr><tr><td style="text-align:left">线上版本</td><td style="text-align:center">线上所有用户使用的代码版本，该版本代码在新版本代码发布后被覆盖更新。</td></tr></tbody></table><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to T-SPACE~&lt;br&gt;本文将介绍小程序的小白入手，从小程序的申请到小程序的开发，一起入门！&lt;/p&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="http://tigutf.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="practise|小程序|小白" scheme="http://tigutf.github.io/tags/practise-%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%B0%8F%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://tigutf.github.io/2018/08/05/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://tigutf.github.io/2018/08/05/个人博客搭建/</id>
    <published>2018-08-05T08:31:28.000Z</published>
    <updated>2018-12-06T13:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>T-Space我的个人博客网站搭建。</p><a id="more"></a><p>搭建个人博客网站若要自己购买服务器来构建，着实比较麻烦，也不知道能不能稳定的运行。而Github提供了一个Github Pages的服务，真的让人眼前一亮。<br>GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</p><h1 id="Github项目搭建"><a href="#Github项目搭建" class="headerlink" title="Github项目搭建"></a>Github项目搭建</h1><p>将我们的博客项目挂载到Github上去，借由GitHub将我们的项目静态页面发布，便可实现了我们的博客网站。</p><ol><li>注册自己的GitHub账号</li><li>登录github上，创建一个仓库repository，存放我们的项目文件;</li><li>填写仓库的属性(仓库名和描述)，注意：这个仓库名比较特殊，取名格式必须为username.github.io，用户名为github的用户名,创建后的网站访问地址即为此username.github.io。</li><li>setting设置，在创建好仓库后，点击仓库中的setting，找到GitHub Pages，选择你要构建发布的分支。OK~</li></ol><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>Github上也有网站主题的一个选择（Jekyll），不过我选用的是Hexo——一个可以帮我们通过md文件生成html静态页面（可设置不同主题模板），并且支持上传到我们对应的服务器的强大工具。</p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><ol><li>安装gitbash和nodejs；安装过程略…</li><li>通过在gitbash上用npm工具进行安装hexo：<br><code>npm i -g hexo</code></li><li>进行Hexo的初始化工作：<br><code>hexo init</code></li></ol><p>初始化后即会生成如下文件结构:</p><table><thead><tr><th>文件/文件夹</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>node_modules</td><td style="text-align:center">依赖包</td></tr><tr><td>public</td><td style="text-align:center">存放的是生成的页面，这个目录最终会发布到服务器</td></tr><tr><td>scaffolds</td><td style="text-align:center">命令生成文章等的模板，一些通用的markdown模板</td></tr><tr><td>source</td><td style="text-align:center">用命令创建的各种文章</td></tr><tr><td>source/_posts</td><td style="text-align:center">发布的文章</td></tr><tr><td>source/_drafts</td><td style="text-align:center">草稿文件</td></tr><tr><td>themes</td><td style="text-align:center">博客的模板</td></tr><tr><td>_config.yml</td><td style="text-align:center">配置文件</td></tr><tr><td>themes/landscape/_config.yml</td><td style="text-align:center">landscape主题的配置文件</td></tr><tr><td>db.json</td><td style="text-align:center">source解析所得到的</td></tr><tr><td>package.json</td><td style="text-align:center">项目所需模块项目的配置信息</td></tr></tbody></table><!-- __ --><h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p><strong>_config.yml分两种：1）网站的配置文件；2）主题的配置文件</strong></p><ul><li>在hexo目录下的_config.yml——网站配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site 信息</span><br><span class="line">title: T-SPACE</span><br><span class="line">subtitle:</span><br><span class="line">description: tigutf的个人博客</span><br><span class="line">author: Tigutf</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL 网址设置</span><br><span class="line">## 如果网站是放在子目录中，将url设置成&apos;http://yoursite.com/child&apos;，将root设置成&apos;/child/&apos;</span><br><span class="line">url: http://tigutf.github.io</span><br><span class="line">root: /</span><br><span class="line"># 文章链接地址格式 。即文章存放的目录。</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">## 资源文件——博客文件，会被上传到github上</span><br><span class="line">source_dir: source</span><br><span class="line">## 静态文件生成后存放在公共文件夹下</span><br><span class="line">public_dir: public</span><br><span class="line">## 标签</span><br><span class="line">tag_dir: tags</span><br><span class="line">## 档案</span><br><span class="line">archive_dir: archives</span><br><span class="line">## 分类</span><br><span class="line">category_dir: categories</span><br><span class="line">## 代码文件夹</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">## 国际化文件夹</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">## 新建文章的默认名称</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">## 默认布局模板是post，而不是draft和page</span><br><span class="line">default_layout: post</span><br><span class="line">## 是否将标题转换成标题形式（首字母大写）</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">## 在新标签页面中打开网页</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">## 是否渲染草稿</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">## 把链接改为与根目录的相对位址</span><br><span class="line">relative_link: false</span><br><span class="line">## 显示未来的文章</span><br><span class="line">future: true</span><br><span class="line">## 高亮设置</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false ### 自动检测语言</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Home page setting 主页页面设置</span><br><span class="line"># path: Root path for your blogs index page. (default = &apos;&apos;) 你的博客索引页根目录</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination) 每页显示的文章量</span><br><span class="line"># order_by: Posts order. (Order by date descending by default) 文章排序依据，默认按日期排序</span><br><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag 分类与标签</span><br><span class="line">default_category: uncategorized</span><br><span class="line">## 分类别名</span><br><span class="line">category_map:</span><br><span class="line">## 标签别名</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format 日期格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination 分页</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions 拓展插件配置</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">## 主题配置，使用的主题是next</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment 部署配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:tigutf/tigutf.github.io.git    </span><br><span class="line">  branch: master  ## 用master分支打包部署</span><br></pre></td></tr></table></figure><p>以上就是我Hexo的网站配置，详细请看注释。</p><ul><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官方主题</a>提供了许多主题来丰富我们的博客，可根据自己喜好选择不同的主题。这边网站主题我自己选用的是<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>。找到主题所在的github地址url，<strong>git clone url</strong> 到 hexo/themes 目录下即可。</li><li>NexT主题下也还有多种模式页面供你选择，有_config.yml配置文件可进行调整，具体请参考Next主题官网<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题配置</a>.</li><li>懒得更换主题的话也可以使用默认：landscape。</li></ul><h2 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h2><h4 id="hexo-init-folder"><a href="#hexo-init-folder" class="headerlink" title="hexo init [folder]"></a>hexo init [folder]</h4><blockquote><p>初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站.</p></blockquote><h4 id="hexo-new-layout-title"><a href="#hexo-new-layout-title" class="headerlink" title="hexo new [layout] [title]"></a>hexo new [layout] [title]</h4><blockquote><p>新建一篇文章(.md文件)。如果没有设置layout的话，默认使用 config.yml中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p></blockquote><h4 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a>hexo version</h4><blockquote><p>查看版本</p></blockquote><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p></blockquote><h4 id="hexo-g-gt-hexo-generate"><a href="#hexo-g-gt-hexo-generate" class="headerlink" title="hexo g   ==&gt; hexo generate"></a>hexo g   ==&gt; hexo generate</h4><blockquote><p>生成静态文件</p></blockquote><h4 id="hexo-s-gt-hexo-server"><a href="#hexo-s-gt-hexo-server" class="headerlink" title="hexo s ==&gt; hexo server"></a>hexo s ==&gt; hexo server</h4><blockquote><p>本地预览</p></blockquote><h4 id="hexo-d-gt-hexo-deploy"><a href="#hexo-d-gt-hexo-deploy" class="headerlink" title="hexo d ==&gt; hexo deploy"></a>hexo d ==&gt; hexo deploy</h4><blockquote><p>部署，可与hexo g合并为 hexo d -g</p></blockquote><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;T-Space我的个人博客网站搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="Github" scheme="http://tigutf.github.io/categories/Github/"/>
    
    
      <category term="github|hexo" scheme="http://tigutf.github.io/tags/github-hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://tigutf.github.io/2018/01/18/hello-world/"/>
    <id>http://tigutf.github.io/2018/01/18/hello-world/</id>
    <published>2018-01-17T16:56:08.956Z</published>
    <updated>2019-01-14T15:32:13.196Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- end --><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读读HashMap(2)</title>
    <link href="http://tigutf.github.io/2018/01/05/%E8%AF%BB%E8%AF%BBHashMap2/"/>
    <id>http://tigutf.github.io/2018/01/05/读读HashMap2/</id>
    <published>2018-01-05T13:22:00.000Z</published>
    <updated>2019-01-14T15:37:06.886Z</updated>
    
    <content type="html"><![CDATA[<p>网上有很多对HashMap，HashTable几个集合类的对比与解说,看了下源码，记下笔记~</p><a id="more"></a><h1 id="HashMap操作"><a href="#HashMap操作" class="headerlink" title="HashMap操作"></a>HashMap操作</h1><h2 id="Java1-6-HashMap—PUT"><a href="#Java1-6-HashMap—PUT" class="headerlink" title="Java1.6 HashMap—PUT"></a>Java1.6 HashMap—PUT</h2><blockquote><p>put操作，基于Java 1.6的源码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.6</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果table数组为空数组&#123;&#125;，进行数组填充（为table分配实际内存空间），入参为threshold，此时threshold为initialCapacity 默认是1&lt;&lt;4(24=16)</span></span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//如果key为null，存储位置为table[0]或table[0]的冲突链上</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);<span class="comment">//对key的hashcode进一步计算，确保散列均匀</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//获取在table中的实际位置</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">    <span class="comment">//如果该对应数据已存在，执行覆盖操作。用新value替换旧value，并返回旧value</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;<span class="comment">//保证并发访问时，若HashMap内部结构发生变化，快速响应失败</span></span><br><span class="line">    addEntry(hash, key, value, i);<span class="comment">//新增一个entry</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这个方法的主要作用是防止质量较差的哈希函数带来过多的冲突（碰撞）问题。</span></span><br><span class="line"><span class="comment">  Java中int值占4个字节，即32位。根据这32位值进行移位、异或运算得到一个值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  indexFor返回hash值和table数组长度减1的与运算结果。</span></span><br><span class="line"><span class="comment">  使用length-1是为了保证结果的最大值是length-1，不会产生数组越界问题。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当执行addEntry，若增加元素后table的大小大于threshold（容器大小与负载因子的乘机），则需要对当前数组进行重置大小（拓展为原来长度的两倍），调用resize(int capacity)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 当容量已经到达允许的最大值，即MAXIMUN_CAPACITY，则不再拓展容量；</span></span><br><span class="line">    <span class="comment">// 而将装载拓展的界限值设为计算机允许的最大值。</span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建新数组，容量为指定的容量</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    <span class="comment">// 设置下一次需要调整数组大小的界限</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保留原数组的引用到src中，</span></span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="comment">// 新容量使新数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="comment">// 遍历原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        <span class="comment">// 获取元素e</span></span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将原数组中的元素置为null</span></span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 遍历原数组中j位置指向的链表</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="comment">// 根据新的容量计算e在新数组中的位置</span></span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                <span class="comment">// 将e插入到newTable[i]指向的链表的头部</span></span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java1-8-HashMap—PUT"><a href="#Java1-8-HashMap—PUT" class="headerlink" title="Java1.8 HashMap—PUT"></a>Java1.8 HashMap—PUT</h2><ul><li>1.8之前，HashMap主干是数组与链表的结合，而1.8版本中发生了一些改变，转变成了基于数组+链表+红黑树实现：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5222801-b17f2e0dfb2f8ead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/810/format/webp" alt=""></p><blockquote><p>1.8版本 基础数组类型变成Node<k,v>[]，如下：</k,v></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">      <span class="keyword">final</span> K key;</span><br><span class="line">      V value;</span><br><span class="line">      Node&lt;K,V&gt; next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><blockquote><p>put操作，基于Java 1.8的源码如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">     return putVal(hash(key), key, value, false, true);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                 boolean evict) &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">      //当前HashMap为空时，初始化数组大小</span><br><span class="line">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">          n = (tab = resize()).length;</span><br><span class="line">      //table数组的位置的算法是:i = (n - 1) &amp; hash，将数组长度减1后与运算hash</span><br><span class="line">      //当计算得到的hash值为空，则新增一个节点</span><br><span class="line">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">          tab[i] = newNode(hash, key, value, null);</span><br><span class="line">      else &#123; //当hash计算得到的值相同（哈希碰撞）</span><br><span class="line">          Node&lt;K,V&gt; e; K k;</span><br><span class="line">          if (p.hash == hash &amp;&amp;</span><br><span class="line">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">              e = p;</span><br><span class="line">         //当节点为红黑树时，将结果插入到红黑树中</span><br><span class="line">          else if (p instanceof TreeNode)</span><br><span class="line">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">          else &#123; //首个链表节点为链表</span><br><span class="line">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                  if ((e = p.next) == null) &#123;</span><br><span class="line">                      p.next = newNode(hash, key, value, null);</span><br><span class="line">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                          treeifyBin(tab, hash);</span><br><span class="line">                      break;</span><br><span class="line">                  &#125;</span><br><span class="line">                  if (e.hash == hash &amp;&amp;</span><br><span class="line">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                      break;</span><br><span class="line">                  p = e;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          if (e != null) &#123; // existing mapping for key</span><br><span class="line">              V oldValue = e.value;</span><br><span class="line">              if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                  e.value = value;</span><br><span class="line">              afterNodeAccess(e);</span><br><span class="line">              return oldValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ++modCount;</span><br><span class="line">      if (++size &gt; threshold)</span><br><span class="line">          resize();</span><br><span class="line">      afterNodeInsertion(evict);</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>HashMap将插入的键值对封装在Node对象中，每个Node对象含有hash值，键对象key，值对象value。当哈希值冲突后，新增的Node会被next变量指向，组成链表。当该链表的长度超过8，将其转换为红黑树节点。</p><ul><li><p>这里有一个注意的地方，table数组的位置的计算算法是:</p><font color="#aa6655"> <strong> i = (n - 1) &amp; hash; </strong> </font><p><strong><br>n是数组的长度，hash是key的哈希值（int型32位）高16位的返回值；<br>HashMap的数组长度是由限制的，一定是2的幂，二进制表示形式（10，100，1000，10000,,,），当减1之后得（01，11，111，1111,,,），(n-1)&amp;hash 等价于 1111…1 &amp; XXXXXXXXXXXXXXXXX ；用hash与(n-1)做位置运算相比%运算更高效，这可能就是HashMap数组长度为2的幂的原因，并且这种巧妙的设计也保证位置i不会超过数组长度。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;  <span class="comment">//初始长度为0</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;<span class="comment">//如果HashMap构造方指定了初始长度和加载因子，threshold会被计算出来</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//第二次及以后的扩容走这里</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;  <span class="comment">//初始化长度和加载因子走这里</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults  //初始默认执行这个分支</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">//默认长度</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="comment">//默认临界值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的长度和位置计算过后，则需要在该位置的首个链表节点插入元素，由于哈希冲突与链表长度达8以上后会转变成红黑树的规则，所以需要多了解下下面一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line"><span class="keyword">if</span> ((e = p.next) == null) &#123; //@<span class="number">1</span>如果遍历到链表的末尾，说明遍历的过程中未找到key相等的节点，将键值对插入末尾</span><br><span class="line">    p.next = newNode(hash, key, value, null);</span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) // <span class="number">-1</span> <span class="keyword">for</span> <span class="number">1</span>st</span><br><span class="line">        treeifyBin(tab, hash); //@<span class="number">3</span>在链表末尾插入新节点后，链表的长度达到<span class="number">8</span>，此时方法treeifyBin(tab, hash)将链表转换为红黑树</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">    //@<span class="number">2</span> 如果遍历链表的过程中，存在哈希值一致，引用相等或equals相等的节点，终止遍历，新键值对的值会替换这个节点上原来的值。</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">p = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java1-8-HashMap—GET取出算法"><a href="#Java1-8-HashMap—GET取出算法" class="headerlink" title="Java1.8 HashMap—GET取出算法"></a>Java1.8 HashMap—GET取出算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>取出算法其实就是插入算法的逆向过程，你可能直接从table[i]中取走键值对，也可能是红黑树或者链表中的一个节点。<br>要注意的是只满足equlas相等并不能有效取出元素，还必须满足哈希值相等，所以要考虑重写key的hashCode()方法。<br><!-- end --></p><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font><p>部分内容参考：<br><a href="https://www.jianshu.com/p/df4a907ef4ef" target="_blank" rel="noopener">https://www.jianshu.com/p/df4a907ef4ef</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上有很多对HashMap，HashTable几个集合类的对比与解说,看了下源码，记下笔记~&lt;/p&gt;
    
    </summary>
    
      <category term="集合" scheme="http://tigutf.github.io/categories/%E9%9B%86%E5%90%88/"/>
    
      <category term="HashMap" scheme="http://tigutf.github.io/categories/%E9%9B%86%E5%90%88/HashMap/"/>
    
    
      <category term="Java|Map|集合" scheme="http://tigutf.github.io/tags/Java-Map-%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>读读HashMap(1)</title>
    <link href="http://tigutf.github.io/2017/10/05/%E8%AF%BB%E8%AF%BBHashMap/"/>
    <id>http://tigutf.github.io/2017/10/05/读读HashMap/</id>
    <published>2017-10-05T14:22:48.000Z</published>
    <updated>2019-01-27T17:20:02.524Z</updated>
    
    <content type="html"><![CDATA[<p>网上有很多对HashMap，HashTable几个集合类的对比与解说,看了下源码，记下笔记~</p><a id="more"></a><p>文章部分参考如下：</p><ol><li><a href="http://www.cnblogs.com/skywang12345/p/3310835.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3310835.html</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6059914.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6059914.html</a></li></ol><h1 id="HashMap基础结构"><a href="#HashMap基础结构" class="headerlink" title="HashMap基础结构"></a>HashMap基础结构</h1><h2 id="HashMap的基础属性"><a href="#HashMap的基础属性" class="headerlink" title="HashMap的基础属性"></a>HashMap的基础属性</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><p>HashMap底层维护的是数组+链表(链地址法),它里面有两个参数：“初始容量” 和 “加载因子”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//默认的初始化大小</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大的容量值，hashMap的容量大小必须是2的n次幂（2^30）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An empty table instance to share when the table is not inflated.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, resized as necessary. Length MUST Always be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br></pre></td></tr></table></figure><ul><li>DEFAULT_INITIAL_CAPACITY 即初始容量，HashMap创建时的初始容量:1&lt;&lt;4 表示 二进制的01，向左偏移4位得到 10000，转换成十进制即为16</li><li>DEFAULT_LOAD_FACTOR 即加载因子，是哈希表在其容量自动增加之前可以达到多满的一种尺度，默认为0.75。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</li><li>HashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对。当发生哈希碰撞时（两个值计算得到的哈希值相同），则存储到对应下标的数组格子的链表里。<font color="#aa5500"><br>（哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是数组+链表的方式，）<br></font></li></ul><p><img src="1543336152x2890174124.jpg" alt="图片失效"></p><h2 id="HashMap的构造函数"><a href="#HashMap的构造函数" class="headerlink" title="HashMap的构造函数"></a>HashMap的构造函数</h2><ul><li>HashMap有4种构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以默认的初始化大小16和负载因子0.75，构造对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定初始化大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定容量大小和负载因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定map</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前三种构造器当中，没有为数组Entry<k,v> table分配内存空间，而是在执行put操作的时候才真正构建table数组；而第四种，指定了Map，构造器中调用putMapEntries(m, false);则会构建table数组。</k,v></p><h2 id="HashMap-原理"><a href="#HashMap-原理" class="headerlink" title="HashMap 原理"></a>HashMap 原理</h2><p>基于Java1.6，在上面的基础信息中我们已经了解HashMap的结构，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的.</p><ol><li>如果计算定位到的数组位置不含链表（当前entry的next指向null），那么对于查找、添加操作很快，仅需一次寻址即可，时间复杂度O(1);</li><li>如果定位到的位置包含链表，对于添加操作，首先遍历链表，存在则覆盖，否则新增，其时间复杂度O(n);对于查找操作，仍需遍历链表，逐一对比key对象查找；</li></ol><p>所以，从性能考虑，HashMap中的链表出现越少，性能才会越好。<br><!-- end --></p><font color="blue" face="楷体"><br>好好学习天天向上-分享、交流、共同进步~<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上有很多对HashMap，HashTable几个集合类的对比与解说,看了下源码，记下笔记~&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://tigutf.github.io/categories/Java/"/>
    
    
      <category term="Java | Map | 集合" scheme="http://tigutf.github.io/tags/Java-Map-%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
</feed>
